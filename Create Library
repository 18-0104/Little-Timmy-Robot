#define yellow 0
#define red 1
#define blue 2

//drive code
float wheel_multiplier;
//create line follow
int a_speed;
int b_speed;
// analog average
int analogValMass;
int analogCounter;
int analogValAvg;
//slow servo
int servoPos;
//drive until change
int start_state;
int laps;
//camera code
int blobArea;
int blobAvg;
int blobCount = 0;
int blobRaw = 0;


void wait(int sleep){
   
    create_drive_direct(0,0);
    msleep(sleep/2);
    motor(0,0);
    msleep(sleep/2);
    
    
    
}

void create_drive_forward(int speed,int distance)
{
    set_create_distance(0);
    while(get_create_distance() > -distance)
    {
        create_drive_direct(-speed,-speed);   
    }  
}

void create_drive_backwards(int speed, int distance)
{
    set_create_distance(0);
    while(get_create_distance() < distance)
    {
        
        create_drive_direct(speed,speed);
        
    }
    
}

void create_turn_right(int deg,int speed)
{
    
    set_create_normalized_angle(0);
    while(get_create_normalized_angle() > -deg)
    {
        create_spin_CW(speed);
        printf("the angle of this turn is = %d \n",get_create_normalized_angle());
    }
}

void create_turn_left(int deg,int speed)
{
    
    set_create_normalized_angle(0);
    while(get_create_normalized_angle() < deg)
    {
        create_spin_CCW(speed);
        printf("the angle of this turn is = %d \n",get_create_normalized_angle());
    }
}

int getAnalogAverage(int port, int laps)
{
    
    analogValMass = 0;
    analogCounter = 0;
    while(analogCounter < laps)
    {
        
     	analogValMass = analogValMass + analog(port);
        analogCounter ++;
        
    }
    printf("calculation complete");
    analogValAvg = analogValMass / laps;
    return analogValAvg;
    
    
}

void create_line_follow_slow(int target_distance,int port)
{
       set_create_distance(0);
       while (get_create_distance() > -target_distance)
       {
       
           printf("analog = %d \n",analog(port));
           a_speed = 0.0588*analog(port)-5.88;
           b_speed = -0.0588*analog(port)+205.88;
           create_drive_direct(0.55*-b_speed,0.55*-a_speed);
                       
       }
}                  
    
    
void create_line_follow_normal(int target_distance,int port)
{
       set_create_distance(0);
       while (get_create_distance() > -target_distance)
       {
       
           printf("analog = %d \n",analog(port));
           a_speed = 0.0588*analog(port)-5.88;
           b_speed = -0.0588*analog(port)+205.88;
           create_drive_direct(0.75 * -b_speed,0.75 * -a_speed);
                       
       }
}                  

void create_line_follow_fast(int target_distance,int port)
{
       set_create_distance(0);
       while (get_create_distance() > -target_distance)
       {
       
           printf("analog = %d \n",analog(port));
           a_speed = 0.0588*analog(port)-5.88;
           b_speed = -0.0588*analog(port)+205.88;
           create_drive_direct(-b_speed,-a_speed);
                       
       }
}                  

void create_line_follow_to_building(int port,int dist_port){
    
 
    while(getAnalogAverage(dist_port,200) < 960)
    {
        
        create_line_follow_slow(1,port);
        
    }
   
    
}

void create_line_follow_to_void(int port, int dist_port){
    
    
    while(getAnalogAverage(dist_port,50) > 940)
    {
        
        create_line_follow_slow(1,port);
        
    }

}

void servo(int port, int pos)
{

    
    set_servo_position(port,pos);
    msleep(1000);
   

}

void slow_servo(int pos, int speedStall, int port){
    

    servoPos = get_servo_position(port);
    while(servoPos != pos){
        
        if(servoPos < pos){
            servoPos = servoPos + 1;
        }else{
            servoPos = servoPos - 1;
        }
        
        set_servo_position(port,servoPos);
        msleep(speedStall);
        
    }

  
    
    
    
}



void drive_until_change_digital(int digital_port, int motor_port,int motor_speed)
{
    
    start_state = digital(digital_port);
    laps = 0;
    while(start_state == digital(digital_port))
    {
        
        mav(motor_port,motor_speed + (laps/8));
        laps ++;
        
    }
    wait(200);
}

void create_wake_up()
{
    
    create_connect();
    enable_servos();
    slow_servo(2023,0,3);
    slow_servo(1580,0,0);
    servo(1,1383);
    
}

void create_shutdown()
{
    
    create_disconnect();
    disable_servos();
    ao();
    
}

int colorSense(int color, int loops) {

    camera_open_black();
    blobCount = 0;
    blobRaw = 0;
    
    while(blobCount < loops){

        camera_update();
        if(color == 0){
            if(get_object_confidence(yellow,0) > 0.4){
                blobRaw = blobRaw + 1;
            } 
        }

        if(color == 1){
            if(get_object_confidence(blue,0) > 0.4){
                blobRaw = blobRaw + 1; 
            }
        }

        if(color == 2){
            if(get_object_confidence(red,0) > 0.4){
                blobRaw = blobRaw + 1; 
            }

        }
        blobCount = blobCount + 1;

    }



    if(blobRaw > loops * 65/100){
        return 0;
    }else{
        return 1;
    }

}

    
